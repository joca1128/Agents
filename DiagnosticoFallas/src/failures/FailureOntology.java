// file: FailureOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package failures;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: FailureOntology.java
 * @author ontology bean generator
 * @version 2019/08/13, 12:51:24
 */
public class FailureOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "Failure";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new FailureOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String SOLICITARPRUEBA_FALLA="falla";
    public static final String SOLICITARPRUEBA="SolicitarPrueba";
    public static final String NOTIFICARINGRESOACTUALIZACION_ESTADO="estado";
    public static final String NOTIFICARINGRESOACTUALIZACION="NotificaringresoActualizacion";
    public static final String NOTIFICAREJECUCION_ESTADO="estado";
    public static final String NOTIFICAREJECUCION="NotificarEjecucion";
    public static final String SOLICITAREJECUCION_CODIGOAEJECUTAR="codigoAEjecutar";
    public static final String SOLICITAREJECUCION="SolicitarEjecucion";
    public static final String INGRESARHIPOTESIS_HIPOTESIS="hipotesis";
    public static final String INGRESARHIPOTESIS="IngresarHipotesis";
    public static final String ACTUALIZARHIPOTESIS_HIPOTESIS="hipotesis";
    public static final String ACTUALIZARHIPOTESIS="ActualizarHipotesis";
    public static final String FALLA_DESCRIPCION="descripcion";
    public static final String FALLA="Falla";
    public static final String HIPOTESISDEFALLA_FALLA="falla";
    public static final String HIPOTESISDEFALLA_ID_UNICO="id_unico";
    public static final String HIPOTESISDEFALLA_CODIGOAEJECUTAR="codigoAEjecutar";
    public static final String HIPOTESISDEFALLA="HipotesisDeFalla";

  /**
   * Constructor
  */
  private FailureOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema hipotesisDeFallaSchema = new ConceptSchema(HIPOTESISDEFALLA);
    add(hipotesisDeFallaSchema, failures.HipotesisDeFalla.class);
    ConceptSchema fallaSchema = new ConceptSchema(FALLA);
    add(fallaSchema, failures.Falla.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema actualizarHipotesisSchema = new PredicateSchema(ACTUALIZARHIPOTESIS);
    add(actualizarHipotesisSchema, failures.ActualizarHipotesis.class);
    PredicateSchema ingresarHipotesisSchema = new PredicateSchema(INGRESARHIPOTESIS);
    add(ingresarHipotesisSchema, failures.IngresarHipotesis.class);
    PredicateSchema solicitarEjecucionSchema = new PredicateSchema(SOLICITAREJECUCION);
    add(solicitarEjecucionSchema, failures.SolicitarEjecucion.class);
    PredicateSchema notificarEjecucionSchema = new PredicateSchema(NOTIFICAREJECUCION);
    add(notificarEjecucionSchema, failures.NotificarEjecucion.class);
    PredicateSchema notificaringresoActualizacionSchema = new PredicateSchema(NOTIFICARINGRESOACTUALIZACION);
    add(notificaringresoActualizacionSchema, failures.NotificaringresoActualizacion.class);
    PredicateSchema solicitarPruebaSchema = new PredicateSchema(SOLICITARPRUEBA);
    add(solicitarPruebaSchema, failures.SolicitarPrueba.class);


    // adding fields
    hipotesisDeFallaSchema.add(HIPOTESISDEFALLA_CODIGOAEJECUTAR, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    hipotesisDeFallaSchema.add(HIPOTESISDEFALLA_ID_UNICO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    hipotesisDeFallaSchema.add(HIPOTESISDEFALLA_FALLA, fallaSchema, ObjectSchema.OPTIONAL);
    fallaSchema.add(FALLA_DESCRIPCION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    actualizarHipotesisSchema.add(ACTUALIZARHIPOTESIS_HIPOTESIS, hipotesisDeFallaSchema, ObjectSchema.OPTIONAL);
    ingresarHipotesisSchema.add(INGRESARHIPOTESIS_HIPOTESIS, hipotesisDeFallaSchema, ObjectSchema.OPTIONAL);
    solicitarEjecucionSchema.add(SOLICITAREJECUCION_CODIGOAEJECUTAR, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    notificarEjecucionSchema.add(NOTIFICAREJECUCION_ESTADO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    notificaringresoActualizacionSchema.add(NOTIFICARINGRESOACTUALIZACION_ESTADO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    solicitarPruebaSchema.add(SOLICITARPRUEBA_FALLA, fallaSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
